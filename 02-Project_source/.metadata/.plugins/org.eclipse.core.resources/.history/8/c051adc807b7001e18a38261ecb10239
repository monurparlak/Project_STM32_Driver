/*
 * phal_generic_stm32f4x.h
 *
 *  Created on: Jan 15, 2024
 *      Author: monurparlak@gmail.com
 *  
 *  Purpose:
 *
 */

/*****************************************************************************/
/**< Includes */
/*****************************************************************************/

#include "phal_gpio_stm32f4x.h"

/*****************************************************************************/
/**< Function Definitions */
/*****************************************************************************/

void phal_gpio_clock_control(gpio_reg_def_t *p_gpiox, bool activate)
{
    if (activate == PHAL_ENABLE)
    {
        uintptr_t gpio_address = (uintptr_t)p_gpiox;

        switch (gpio_address)
        {
        case (uintptr_t)PHAL_GPIO_PORTA:
            PHAL_GPIO_PORTA_CLK_EN();
            break;
        case (uintptr_t)PHAL_GPIO_PORTB:
            PHAL_GPIO_PORTB_CLK_EN();
            break;
        case (uintptr_t)PHAL_GPIO_PORTC:
            PHAL_GPIO_PORTC_CLK_EN();
            break;
        case (uintptr_t)PHAL_GPIO_PORTD:
            PHAL_GPIO_PORTD_CLK_EN();
            break;
        case (uintptr_t)PHAL_GPIO_PORTE:
            PHAL_GPIO_PORTE_CLK_EN();
            break;
        case (uintptr_t)PHAL_GPIO_PORTF:
            PHAL_GPIO_PORTF_CLK_EN();
            break;
        case (uintptr_t)PHAL_GPIO_PORTG:
            PHAL_GPIO_PORTG_CLK_EN();
            break;
        case (uintptr_t)PHAL_GPIO_PORTI:
            PHAL_GPIO_PORTI_CLK_EN();
            break;
        default:
            // Handle the default case
            break;
        }
    }
}


void phal_gpio_init(gpio_handle_t *p_gpio_handle)
{
	uint32_t temp = 0;

    if(GPIO_MODE_AN >= p_gpio_handle->gpio_pin_config.gpio_pin_mode)
    {
    	temp = (p_gpio_handle->gpio_pin_config.gpio_pin_mode
    			<< (2 * p_gpio_handle->gpio_pin_config.gpio_pin_no));
    	p_gpio_handle->p_gpio_portx->phal_moder |= temp;
    }
    else
    {
    	/* TODO: Do Something */
    }
	temp = 0;
    temp = (p_gpio_handle->gpio_pin_config.gpio_pin_speed
    		<< (2 * p_gpio_handle->gpio_pin_config.gpio_pin_no));
    p_gpio_handle->p_gpio_portx->phal_ospeedr |= temp;

    temp = 0;
    temp = (p_gpio_handle->gpio_pin_config.gpio_pin_pupd
    		<< (2 * p_gpio_handle->gpio_pin_config.gpio_pin_no));
    p_gpio_handle->p_gpio_portx->phal_pupdr |= temp;

    temp = 0;
    temp = (p_gpio_handle->gpio_pin_config.gpio_pin_optype
    		<< p_gpio_handle->gpio_pin_config.gpio_pin_no);
    p_gpio_handle->p_gpio_portx->phal_otyper |= temp;

    temp = 0;
    if (GPIO_MODE_AF == p_gpio_handle->gpio_pin_config.gpio_pin_mode)
    {
        uint32_t af_register = p_gpio_handle->gpio_pin_config.gpio_pin_no / 8;
        uint32_t af_offset = (p_gpio_handle->gpio_pin_config.gpio_pin_no % 8) * 4;

        temp = (p_gpio_handle->gpio_pin_config.gpio_pin_alt_func << af_offset);
        p_gpio_handle->p_gpio_portx->phal_afr[af_register] |= temp;
    }
}

void phal_gpio_deinit(gpio_reg_def_t *p_gpiox)
{
    if (p_gpiox == PHAL_GPIO_PORTA)
    {
        PHAL_GPIO_PORTA_REG_RESET();
    }
    else if (p_gpiox == PHAL_GPIO_PORTB)
    {
        PHAL_GPIO_PORTB_REG_RESET();
    }
    else if (p_gpiox == PHAL_GPIO_PORTC)
    {
        PHAL_GPIO_PORTC_REG_RESET();
    }
    else if (p_gpiox == PHAL_GPIO_PORTD)
    {
        PHAL_GPIO_PORTD_REG_RESET();
    }
    else if (p_gpiox == PHAL_GPIO_PORTE)
    {
        PHAL_GPIO_PORTE_REG_RESET();
    }
    else if (p_gpiox == PHAL_GPIO_PORTF)
    {
        PHAL_GPIO_PORTF_REG_RESET();
    }
    else if (p_gpiox == PHAL_GPIO_PORTG)
    {
        PHAL_GPIO_PORTG_REG_RESET();
    }
    else if (p_gpiox == PHAL_GPIO_PORTI)
    {
        PHAL_GPIO_PORTI_REG_RESET();
    }
    // Add more else-if conditions if needed for other GPIO ports
    else
    {
        // Handle the default case
    }
}

uint8_t phal_gpio_read_pin(gpio_reg_def_t *p_gpiox, uint8_t pin_no)
{
	uint8_t data;

	data = (uint8_t)((p_gpiox->phal_idr >> pin_no) & 0x00000001);

	return data;
}

uint16_t phal_gpio_read_port(gpio_reg_def_t *p_gpiox)
{
	uint16_t data;

	data = (uint16_t)(p_gpiox->phal_idr);

	return data;
}

void phal_gpio_write_pin(gpio_reg_def_t *p_gpiox, uint8_t pin_no, uint8_t value)
{
	if(PHAL_GPIO_PIN_SET == value)
	{
		p_gpiox->phal_odr |= (1 << pin_no);
	}
	else
	{
		p_gpiox->phal_odr &= ~(1 << pin_no);
	}
}

void phal_gpio_write_port(gpio_reg_def_t *p_gpiox, uint8_t value)
{
	p_gpiox->phal_odr = value;
}

void phal_gpio_toggle_pin(gpio_reg_def_t *p_gpiox, uint8_t pin_no)
{
	p_gpiox->phal_odr ^= (1 << pin_no);
}

void phal_gpio_irq(uint8_t irq_no, uint8_t irq_priority, uint8_t activite)
{
    /**< Do something */
}

void phal_gpio_irq_handle(uint8_t pin_no)
{
    /**< Do something */
}
