/*
 * phal_generic_stm32f4x.h
 *
 *  Created on: Jan 15, 2024
 *      Author: monurparlak@gmail.com
 *  
 *  Purpose:
 *
 */

#ifndef INC_PHAL_GENERIC_STM32F4X_H_
#define INC_PHAL_GENERIC_STM32F4X_H_

/*****************************************************************************/
/**< Includes */
/*****************************************************************************/

#include <stdint.h>

/*****************************************************************************/
/**< Macros */
/*****************************************************************************/

#define phal_vo     volatile

#define ENABLE      1
#define DISABLE     0

#define GPIO_SET    1
#define GPIO_RESET  0

/* 
 * Memory Addresses
 */
#define FLASH_ADDR      0x08000000U     /**< TODO: Do Something */
#define SRAM1_ADDR      0x20000000U     /**< TODO: Do Something */
#define SRAM2_ADDR      0x20001C00U     /**< TODO: Do Something */
#define ROM_ADDR        0x1FFF0000U     /**< TODO: Do Something */
#define SRAM            SRAM1_ADDR      /**< TODO: Do Something */

/* 
 * AHBx and APBx Addresses
 */
#define PERIPHERAL_ADDR         0x40000000U         /**< TODO: Do Something */
#define AHB1_PERIPHERAL_ADDR    PERIPHERAL_ADDR     /**< TODO: Do Something */
#define AHB2_PERIPHERAL_ADDR    0x40010000U         /**< TODO: Do Something */
#define APB1_PERIPHERAL_ADDR    0x40020000U         /**< TODO: Do Something */
#define APB2_PERIPHERAL_ADDR    0x50000000U         /**< TODO: Do Something */

/* 
 * AHB1 Block Addresses
 */
#define GPIO_PORTA_ADDR     (AHB1_PERIPHERAL_ADDR + 0x0000U)      /**< TODO: Do Something */
#define GPIO_PORTB_ADDR     (AHB1_PERIPHERAL_ADDR + 0x0400U)      /**< TODO: Do Something */
#define GPIO_PORTC_ADDR     (AHB1_PERIPHERAL_ADDR + 0x0800U)      /**< TODO: Do Something */
#define GPIO_PORTD_ADDR     (AHB1_PERIPHERAL_ADDR + 0x0C00U)      /**< TODO: Do Something */
#define GPIO_PORTE_ADDR     (AHB1_PERIPHERAL_ADDR + 0x1000U)      /**< TODO: Do Something */
#define GPIO_PORTF_ADDR     (AHB1_PERIPHERAL_ADDR + 0x1400U)      /**< TODO: Do Something */
#define GPIO_PORTG_ADDR     (AHB1_PERIPHERAL_ADDR + 0x1800U)      /**< TODO: Do Something */
#define GPIO_PORTH_ADDR     (AHB1_PERIPHERAL_ADDR + 0x1C00U)      /**< TODO: Do Something */
#define GPIO_PORTI_ADDR     (AHB1_PERIPHERAL_ADDR + 0x2000U)      /**< TODO: Do Something */

#define RCC_ADDR            (AHB1_PERIPHERAL_ADDR + 0x2000U)      /**< TODO: Do Something */

/* 
 * APB1 Block Addresses
 */
#define I2C1_ADDR       (APB1_PERIPHERAL_ADDR + 0x5400U)     /**< TODO: Do Something */
#define I2C2_ADDR       (APB1_PERIPHERAL_ADDR + 0x5800U)     /**< TODO: Do Something */
#define I2C3_ADDR       (APB1_PERIPHERAL_ADDR + 0x5C00U)     /**< TODO: Do Something */

#define SPI1_ADDR       (APB1_PERIPHERAL_ADDR + 0x3800U)     /**< TODO: Do Something */
#define SPI2_ADDR       (APB1_PERIPHERAL_ADDR + 0x3C00U)     /**< TODO: Do Something */

#define USART2_ADDR     (APB1_PERIPHERAL_ADDR + 0x4400U)     /**< TODO: Do Something */
#define USART3_ADDR     (APB1_PERIPHERAL_ADDR + 0x4800U)     /**< TODO: Do Something */
#define UART4_ADDR      (APB1_PERIPHERAL_ADDR + 0x4C00U)     /**< TODO: Do Something */
#define UART5_ADDR      (APB1_PERIPHERAL_ADDR + 0x5000U)     /**< TODO: Do Something */

/* 
 * APB2 Block Addresses
 */
#define EXTI_ADDR       (APB2_PERIPHERAL_ADDR + 0x3C00U)     /**< TODO: Do Something */
#define SPI3_ADDR       (APB2_PERIPHERAL_ADDR + 0x3000U)     /**< TODO: Do Something */
#define SYSCFG_ADDR     (APB2_PERIPHERAL_ADDR + 0x3800U)     /**< TODO: Do Something */
#define USART1_ADDR     (APB2_PERIPHERAL_ADDR + 0x1000U)     /**< TODO: Do Something */
#define USART6_ADDR     (APB2_PERIPHERAL_ADDR + 0x1400U)     /**< TODO: Do Something */

/*****************************************************************************/
/**< Typedef Structures */
/*****************************************************************************/

/* 
 * GPIO register definition
 */
typedef struct {
   phal_vo uint32_t MODER;         /**< TODO: Do Something */
   phal_vo uint32_t OTYPER;        /**< TODO: Do Something */
   phal_vo uint32_t OSPEEDR;       /**< TODO: Do Something */
   phal_vo uint32_t PUPDR;         /**< TODO: Do Something */
   phal_vo uint32_t IDR;           /**< TODO: Do Something */
   phal_vo uint32_t ODR;           /**< TODO: Do Something */
   phal_vo uint32_t BSRR;          /**< TODO: Do Something */
   phal_vo uint32_t LCKR;          /**< TODO: Do Something */
   phal_vo uint32_t AFR[2];        /**< TODO: Do Something */

}gpio_reg_def_t;
/* 
 * RCC register definition
 */
typedef struct {
    phal_vo uint32_t AHB1RSTR;      /**< RCC AHB1 Peripheral Reset Register */
    phal_vo uint32_t AHB2RSTR;      /**< RCC AHB2 Peripheral Reset Register */
    phal_vo uint32_t AHB3RSTR;      /**< RCC AHB3 Peripheral Reset Register */
    uint32_t RESERVED0;             /**< Reserved - Do Something */
    phal_vo uint32_t APB1RSTR;      /**< RCC APB1 Peripheral Reset Register */
    phal_vo uint32_t APB2RSTR;      /**< RCC APB2 Peripheral Reset Register */
    uint32_t RESERVED1[2];          /**< Reserved - Do Something */
    phal_vo uint32_t AHB1ENR;       /**< RCC AHB1 Peripheral Clock Enable Register */
    phal_vo uint32_t AHB2ENR;       /**< RCC AHB2 Peripheral Clock Enable Register */
    uint32_t RESERVED2;             /**< Reserved - Do Something */
    phal_vo uint32_t APB1ENR;       /**< RCC APB1 Peripheral Clock Enable Register */
    phal_vo uint32_t APB2ENR;       /**< RCC APB2 Peripheral Clock Enable Register */
    uint32_t RESERVED3[2];          /**< Reserved - Do Something */
    phal_vo uint32_t AHB1LPENR;     /**< RCC AHB1 Peripheral Clock Enable in Low Power Mode Register */
    phal_vo uint32_t AHB2LPENR;     /**< RCC AHB2 Peripheral Clock Enable in Low Power Mode Register */
    phal_vo uint32_t AHB3LPENR;     /**< RCC AHB3 Peripheral Clock Enable in Low Power Mode Register */
    uint32_t RESERVED4;             /**< Reserved - Do Something */
    phal_vo uint32_t APB1LPENR;     /**< RCC APB1 Peripheral Clock Enable in Low Power Mode Register */
    phal_vo uint32_t APB2LPENR;     /**< RCC APB2 Peripheral Clock Enable in Low Power Mode Register */
    uint32_t RESERVED5[2];          /**< Reserved - Do Something */
    phal_vo uint32_t BDCR;          /**< RCC Backup Domain Control Register */
    phal_vo uint32_t CSR;           /**< RCC Clock Control & Status Register */
    uint32_t RESERVED6[2];          /**< Reserved - Do Something */
    phal_vo uint32_t SSCGR;         /**< RCC Spread Spectrum Clock Generation Register */
    phal_vo uint32_t PLLI2SCFGR;    /**< RCC PLLI2S Configuration Register */
    phal_vo uint32_t PLLSAICFGR;    /**< RCC PLLSAI Configuration Register */
    phal_vo uint32_t DCKCFGR;       /**< RCC Dedicated Clock Configuration Register */
    phal_vo uint32_t CKGATENR;      /**< RCC Clocks Gated Enable Register */
    phal_vo uint32_t DCKCFGR2;      /**< RCC Dedicated Clock Configuration Register 2 */

} rcc_reg_def_t;

/* 
 * GPIO peripheral definition
 */
#define GPIO_PORTA  ((gpio_reg_def_t*) GPIO_PORTA_ADDR)  /**< TODO: Do Something */
#define GPIO_PORTB  ((gpio_reg_def_t*) GPIO_PORTB_ADDR)  /**< TODO: Do Something */
#define GPIO_PORTC  ((gpio_reg_def_t*) GPIO_PORTC_ADDR)  /**< TODO: Do Something */
#define GPIO_PORTD  ((gpio_reg_def_t*) GPIO_PORTD_ADDR)  /**< TODO: Do Something */
#define GPIO_PORTE  ((gpio_reg_def_t*) GPIO_PORTE_ADDR)  /**< TODO: Do Something */
#define GPIO_PORTF  ((gpio_reg_def_t*) GPIO_PORTF_ADDR)  /**< TODO: Do Something */
#define GPIO_PORTG  ((gpio_reg_def_t*) GPIO_PORTG_ADDR)  /**< TODO: Do Something */
#define GPIO_PORTH  ((gpio_reg_def_t*) GPIO_PORTH_ADDR)  /**< TODO: Do Something */
#define GPIO_PORTI  ((gpio_reg_def_t*) GPIO_PORTI_ADDR)  /**< TODO: Do Something */

#define RCC         ((rcc_reg_def_t*) RCC_ADDR)  /**< TODO: Do Something */

/* 
 * Clock enable for GPIO peripheral definition
 */
#define GPIO_PORTA_CLK_EN()     (RC->AHB1ENR |= (1 << 0))
#define GPIO_PORTB_CLK_EN()     (RC->AHB1ENR |= (1 << 1))
#define GPIO_PORTC_CLK_EN()     (RC->AHB1ENR |= (1 << 2))
#define GPIO_PORTD_CLK_EN()     (RC->AHB1ENR |= (1 << 3))
#define GPIO_PORTE_CLK_EN()     (RC->AHB1ENR |= (1 << 4))
#define GPIO_PORTF_CLK_EN()     (RC->AHB1ENR |= (1 << 5))
#define GPIO_PORTG_CLK_EN()     (RC->AHB1ENR |= (1 << 6))
#define GPIO_PORTI_CLK_EN()     (RC->AHB1ENR |= (1 << 7))

/* 
 * Clock enable for I2C peripheral definition
 */
#define I2C1_ADDR_CLK_EN()       (RCC->APB1ENR |= (1 << 21))
#define I2C2_ADDR_CLK_EN()       (RCC->APB1ENR |= (1 << 22))
#define I2C3_ADDR_CLK_EN()       (RCC->APB1ENR |= (1 << 23))

/* 
 * Clock enable for SPI peripheral definition
 */
#define SPI1_ADDR_CLK_EN()       (RCC->APB2ENR |= (1 << 12))
#define SPI2_ADDR_CLK_EN()       (RCC->APB2ENR |= (1 << 14))
#define SPI3_ADDR_CLK_EN()       (RCC->APB2ENR |= (1 << 15))
#define SPI4_ADDR_CLK_EN()       (RCC->APB2ENR |= (1 << 13))

/* 
 * Clock enable for USART peripheral definition
 */
#define USART1_ADDR_CLK_EN()    (RCC->APB2ENR |= (1 << 4))
#define USART2_ADDR_CLK_EN()    (RCC->APB2ENR |= (1 << 17))
#define USART3_ADDR_CLK_EN()    (RCC->APB2ENR |= (1 << 18))
#define UART4_ADDR_CLK_EN()     (RCC->APB2ENR |= (1 << 19))
#define UART5_ADDR_CLK_EN()     (RCC->APB2ENR |= (1 << 20))
#define USART6_ADDR_CLK_EN()    (RCC->APB2ENR |= (1 << 5))

/* 
 * Clock disable for GPIO peripheral definition
 */
#define GPIO_PORTA_CLK_DIS()     (RC->AHB1ENR &= ~(1 << 0))
#define GPIO_PORTB_CLK_DIS()     (RC->AHB1ENR &= ~(1 << 1))
#define GPIO_PORTC_CLK_DIS()     (RC->AHB1ENR &= ~(1 << 2))
#define GPIO_PORTD_CLK_DIS()     (RC->AHB1ENR &= ~(1 << 3))
#define GPIO_PORTE_CLK_DIS()     (RC->AHB1ENR &= ~(1 << 4))
#define GPIO_PORTF_CLK_DIS()     (RC->AHB1ENR &= ~(1 << 5))
#define GPIO_PORTG_CLK_DIS()     (RC->AHB1ENR &= ~(1 << 6))
#define GPIO_PORTI_CLK_DIS()     (RC->AHB1ENR &= ~(1 << 7))

/* 
 * Clock disable for I2C peripheral definition
 */
#define I2C1_ADDR_CLK_DIS()       (RCC->APB1ENR &= ~(1 << 21))
#define I2C2_ADDR_CLK_DIS()       (RCC->APB1ENR &= ~(1 << 22))
#define I2C3_ADDR_CLK_DIS()       (RCC->APB1ENR &= ~(1 << 23))

/* 
 * Clock disable for SPI peripheral definition
 */
#define SPI1_ADDR_CLK_DIS()       (RCC->APB2ENR &= ~(1 << 12))
#define SPI2_ADDR_CLK_DIS()       (RCC->APB2ENR &= ~(1 << 14))
#define SPI3_ADDR_CLK_DIS()       (RCC->APB2ENR &= ~(1 << 15))
#define SPI4_ADDR_CLK_DIS()       (RCC->APB2ENR &= ~(1 << 13))

/* 
 * Clock disable for USART peripheral definition
 */
#define USART1_ADDR_CLK_DIS()    (RCC->APB2ENR &= ~(1 << 4))
#define USART2_ADDR_CLK_DIS()    (RCC->APB2ENR &= ~(1 << 17))
#define USART3_ADDR_CLK_DIS()    (RCC->APB2ENR &= ~(1 << 18))
#define UART4_ADDR_CLK_DIS()     (RCC->APB2ENR &= ~(1 << 19))
#define UART5_ADDR_CLK_DIS()     (RCC->APB2ENR &= ~(1 << 20))
#define USART6_ADDR_CLK_DIS()    (RCC->APB2ENR &= ~(1 << 5))







#endif /* INC_PHAL_GENERIC_STM32F4X_H_ */
