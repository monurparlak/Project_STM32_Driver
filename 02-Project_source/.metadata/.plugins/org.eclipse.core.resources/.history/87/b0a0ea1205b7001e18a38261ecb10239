/*
 * phal_spi_stm32f4x.h
 *
 *  Created on: Jan 19, 2024
 *      Author: monurparlak@gmail.com
 *
 *  Purpose:
 *
 */

#include "phal_spi_stm32f4x.h"

void phal_spi_clock_control(spi_reg_def_t *p_spix, bool activite);

/**
 * @brief Initializes the SPI module for STM32F4 board.
 * Configures the SPI module based on the provided handle.
 *
 * @param p_spi_handle: Pointer to the SPI handle structure containing
 *                      configuration parameters for SPI initialization.
 *
 * @return: None
 *
 */
void phal_spi_init(spi_handle_t *p_spi_handle);

/**
 * @brief Deinitializes the SPI module
 * Resets the configuration of the specified SPI module.
 *
 * @param p_spix: Pointer to the register structures of the SPI module
 *                to be deinitialized (e.g., SPI1, SPI2, etc.).
 *
 * @return: None
 *
 */
void phal_spi_deinit(spi_reg_def_t *p_spix);

/**
 * @brief Sends data over SPI
 * Transmits data from the provided buffer over the specified SPI module.
 *
 * @param p_spix:      Pointer to the register structures of the SPI module.
 *                    (For example: SPI1, SPI2, etc.)
 *
 * @param p_tx_buffer: Pointer to the transmit data buffer.
 *
 * @param len:         Length of the data to be transmitted.
 *
 * @return: None
 *
 */
void phal_spi_send_data(spi_reg_def_t *p_spix, uint8_t *p_tx_buffer, uint32_t len);

/**
 * @brief Receives data over SPI
 * Receives data into the provided buffer from the specified SPI module.
 *
 * @param p_spix:      Pointer to the register structures of the SPI module.
 *                    (For example: SPI1, SPI2, etc.)
 *
 * @param p_rx_buffer: Pointer to the receive data buffer.
 *
 * @param len:         Length of the data to be received.
 *
 * @return: None
 *
 */
void phal_spi_receive(spi_reg_def_t *p_spix, uint8_t *p_rx_buffer, uint32_t len);

/**
 * @brief Configures SPI interrupt
 * Configures the specified SPI interrupt with the given parameters.
 *
 * @param irq_no:       The IRQ number associated with the SPI interrupt.
 *
 * @param activite:     The activation state of the SPI interrupt (enable or disable).
 *
 * @return: None
 *
 */
void phal_spi_irq_interrupt(uint8_t irq_no, uint8_t activite);

/**
 * @brief Sets the priority for SPI interrupt
 * Sets the priority level of the specified SPI interrupt.
 *
 * @param irq_no:         The IRQ number associated with the SPI interrupt.
 *
 * @param irq_priority:   The priority level to be set for the SPI interrupt.
 *
 * @return: None
 *
 */
void phal_spi_irq_priority(uint8_t irq_no, uint32_t irq_priority);

/**
 * @brief Handles SPI interrupt
 * Handles the SPI interrupt associated with the specified pin.
 *
 * @param pin_no: The pin number of the GPIO module associated with the SPI interrupt.
 *
 * @return: None
 *
 */
void phal_spi_irq_handle(uint8_t pin_no);



